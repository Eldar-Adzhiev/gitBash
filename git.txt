Настройки кофигурации Git:
$ git config --global user.name "Eldar Adzhiev" 
$ git config --global user.email johndoe@example.com 

Посмотреть настройки конфигурации:
$ git config --list

Посмотреть Глобальные конфигурации Git:
$ git config --list --global

Посмотреть сам файл .gitconfig  в домашней директории:
$ cat ~/.gitconfig

Настройка текстового редактора в Git(Если не выбрали при установки):
$ git config --global core.editor git 
(ссылка на настройку редакторов: https://docs.github.com/en/github/getting-started-with-github/getting-started-with-git/associating-text-editors-with-git)

Alias (Алиасы) можно использовать как псевдоним для любой команды (Усли часто использовать какую-нибудь команду
можно ей дать короткую команду что бы вводить быстрее):
$ git config --global alias.c config -здесь мы команду config назвали "c", т.е. нам не надо вводить слово config.
	Так же можем придавать ему несколько системных команды c помощью !
$ git config alias.sayhi '!echo "hello"; echo "from git"'  так если после этой команды написать команду:
$ git sayhi то командная страка высветит - hello и from git
	Так же получить помошь можно с помощью команды
$ git help <config> вместо конфиг можно вводить любую другую команду

Что бы инициализировать папку как репозиторий:
$ git init  создасться папка с настройками .git

Посмотреть коммит:
$ git show  0fa1 - первые четыре символа коммита.
$ git show --pretty=fuller 10fa1  - посмотреть более полную версию коммита

Скопировать удаленный репозиторий к себе на компьютер (Заходим в папку в которою хотим запустить репозиторий)
$ git clone https://github.com/Eldar-Adzhiev/Terminal_Linux.git (или SSYkey)

Посмотреть какие файлы изменились по сравнению с репозиторием:
$ git status

Посмотреть что именно поменяли в файле:
$ git diff

Добавление изменений:
$ git add filename.txt -добавить конкретный файл
$ git add filename.txt filename.txt foldername -добавление конкретных файлов, папок все вместе
$ git add -A  -добавить все файлы во всех отслеживаемы директориях
$ git add .  -добавит только с текущей директории 
$ git add -p filename.txt после этой команды гит для каждого измененного фрагмента файла предложит добавлять
его в index или нет (y - да, n - нет)


Коммит(Это пакет изменений который может состоять из одного или нескольких файлов которые вместе составляют
единые изменения с точки зрения функционала проекта) (набор изменений которые идут вместе, добавляют или 
меняют функционал в проекте)
$ git commit   -в этой команде откроется редактор в котором нужно будет написать коментарий(описание) к коммиту
$ git commit -m "Коментарий"  -Эта команда помогает сразу закомитеть без открываения редактора,
 а коментарий(описание) пишем в ковычках.
$ git commit -am "Коментарий"  -Эта команда добавляет коммит сразу и нам не нужно прописывать команду "git add".
(Работает только с отслеживаемымми гитом файлами)
$ git commit -m "Коментарий" folder/filename.txt - Если хотим хотим добавить какой-то один файл то указываем путь
(так же действует ограничение файлы которые гит не отслеживает будут  проигнорированы).
$ git config --global alias.commitall '!git add .;git commit' - здесь мы с помощью alias можем объеденить несколько 
команд в одну и с помщью одной команды и добавить и закомитеть сразу. После этой команды просто можно
ввести $ git commitall -m "Коментарий"

Как создать ключ SSH:
Вводим в GitBash here команду:
$ ssh-keygen -t rsa -c "Eldar Adzhiev"
	Просит пароль Passphrase: Просто нажимаем Enter
будет без пароля (если вводить значения то они не будут видны
в терминале)
   Переходим в папку которая была указана присоздании ключа 
Открываем папку .ssh
открываем файл  id_rsa
Копируем все, заходим в профиль в GitHub 
в settings создаем новый sshkey


Как связать папку с удаленным репозиторием:
1) Открываем GitBash в нужной папке прописываем команду 
$ git init - иницилизирует папку
(Создастся файл .git)
2) Создаем Файл:
$ touch filename.txt
3) Добавить изменения в комминт:
$ git add filename.txt
4) Закомитеь:
$ git commit -m "Coment"
5) Связать папку с удаленным репозиторием:
$ git remote add origin master <https or ssh>
(origin - имя удаленного репозитория. Когда мы проиницилизировали папку, то
связываем ее через эту команду. И этой же командой называем ее "origin".
Так же мы можем эту папку на локальном диске связать с другим репозиторием в GitHub
Укавав команду: $ git remote add second master <https or ssh>.
	Получается мы можем в одной папке на локальном диске связать несколько 
удаленных репозиториев и пушить файлы в какой захотим)
	(Команда git remote add origin https://github.com/test-github-04/test-github.git добавляет сервер, 
где origin — это имя сервера, а url — это адрес.
У вас может быть несколько удалённых серверов, с которыми работает проект. Проверить добавленные сервера
можно командой git remote -v (fetch — откуда забирать, push — куда отправлять изменения).
6) Отправляем файлы в удаленный репозиторий:
$ git push -u origin master
(git push -u origin main позволяет запушить (отправить) ветку main на сервер origin. Тут вам, скорее всего,
потребуется связать приложение и GitHub, повторно залогинившись через браузер.)
	Выполнив команду git push -u origin master вы устанавливаете связь между той веткой, в которой вы 
находитесь и веткой master на удалённом сервере. Команду требуется выполнить единожды, чтобы потом можно 
было отправлять/принимать изменения лишь выполняя git push из ветки без указания всяких алиасов для сервера 
и удалённых веток. Это сделано для удобства.


Удаление и переименование файлов:
	Если удалить файл локальнольно то он будет помечен как удаленный и что бы его удалить нам нужно
добавить его в индекс командой git add filedeletedname.txt  а затем закомитеть его командой git commit -m Cleanup
$ git rm -r foldername -эта команда удаляет папки (Эта команда сразу удаляет из рабочей директории и добавляет в индекс
т.е = rm -r foldername + git add foldername)
$ git rm -r --cached foldername эта команда удалит из индекса но оставит в рабочем каталоге)
$ git rm -f filename.txt -эта команда удаляет насильно любой файл благодаря "-f" т.е. если мы внесем изменения 
в файл и захотим удалить его то гит ругнется и предупредит что фал изменен, и благодаря этой команде игнорируя
предупреждения гит удалит файл. При этом все незакомиченные изменения навсегда пропадут.
	Переименование файлов в гите по суте нет. если мы переименуем файл то гит это увидит как будто старый файл 
удален и есть новый не отслеживаемый файл. Посли команды git add гит распознаст этот файл как переименованный!
$ git mv filename.txt Rename.txt -эта команда сразу переименовывает файл и добавляет его в индекс
$ git rm text.txt    # удалить отслеживаемый неизменённый файл и проиндексировать это изменение
$ git rm -f text.txt # удалить отслеживаемый изменённый файл и проиндексировать это изменение
$ git rm -r log/     # удалить всё содержимое отслеживаемой директории log/ и проиндексировать это изменение
$ git rm ind*        # удалить все отслеживаемые файлы с именем, начинающимся на «ind» в текущей директории и проиндексировать это изменение
$ git rm --cached readme.txt # удалить из отслеживаемых индексированный файл (ФАЙЛ ОСТАНЕТСЯ НА МЕСТЕ) (часто используется для нечаянно добавленных в отслеживаемые файлов)

		Ветки
	Создание и переключение:
$ git branch                 # показать список веток
$ git branch -v              # показать список веток и последний коммит в каждой
$ git branch new_branch      # создать новую ветку с указанным именем на текущем коммите
$ git branch new_branch 5589877 # создать новую ветку с указанным именем на указанном коммите
$ git branch -f master 5589877  # переместить ветку master на указанный коммит
$ git branch -f master master~2 # переместить ветку master на 2 коммита назад
$ git checkout new_branch    # перейти в указанную ветку
$ git checkout -b new_branch # создать новую ветку с указанным именем и перейти в неё
$ git checkout -B master 5589877 # переместить ветку с указанным именем на указанный коммит и перейти в неё
	Команда checkout  при незакоммиченных изменениях: 
(Если просто написать команду  git checkout master, то гит покажет ошибку и не пререключит на ветку мастер,
потому что гит защищает насот потерь незакомиченных изменений)
$ git checkout --force master или $ git checkout -f master #эта команда силой переключает с ветки на ветку и незакомиченные данные стираются
$ git checkout -f HEAD  #Так как HEAD это ссылка на текущую ветку, то мы преключаемся туда где и были. Т.е. этой командой можно удалить незакомиченные данные

























































